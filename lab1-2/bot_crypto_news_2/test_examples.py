#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è News Aggregator Bot
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∏ —Ç–µ—Å—Ç—ã
"""

import os
import json
import asyncio
from datetime import datetime
from news_utils import NewsFetcher, NewsFilter, NewsFormatter

def test_news_fetcher():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NewsFetcher...")
    
    fetcher = NewsFetcher()
    
    # –¢–µ—Å—Ç RSS –Ω–æ–≤–æ—Å—Ç–µ–π
    print("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RSS –Ω–æ–≤–æ—Å—Ç–µ–π:")
    rss_news = fetcher.fetch_rss_news('ru', 3)
    for i, news in enumerate(rss_news, 1):
        print(f"{i}. {news['title']}")
        print(f"   üìÖ {news['date']}")
        print(f"   üîó {news['url']}")
        print()
    
    # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–∞–º
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–∞–º:")
    topics = ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'IT', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ']
    filtered_news = fetcher.get_news_by_topics(topics, 'ru', 3)
    for i, news in enumerate(filtered_news, 1):
        print(f"{i}. {news['title']}")
        print(f"   üìÖ {news['date']}")
        print()

def test_news_filter():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NewsFilter...")
    
    filter_obj = NewsFilter()
    
    # –ü—Ä–∏–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
    sample_news = [
        {
            'title': '–ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏',
            'description': '–û–±–∑–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ü–û',
            'date': '01.01.2024 10:00',
            'url': 'https://example.com/news1',
            'source': 'TechNews'
        },
        {
            'title': '–†–µ–∫–ª–∞–º–∞ –Ω–æ–≤–æ–≥–æ iPhone',
            'description': '–ö—É–ø–∏—Ç–µ –Ω–æ–≤—ã–π iPhone —Å–æ —Å–∫–∏–¥–∫–æ–π 50%',
            'date': '01.01.2024 11:00',
            'url': 'https://example.com/ad1',
            'source': 'AdSite'
        },
        {
            'title': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞–±–∏—Ä–∞—é—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å',
            'description': 'Bitcoin –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç',
            'date': '01.01.2024 12:00',
            'url': 'https://example.com/crypto',
            'source': 'CryptoNews'
        }
    ]
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Ä–µ–∫–ª–∞–º—ã
    filtered = filter_obj.filter_news(sample_news)
    print(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å: {len(filtered)} –Ω–æ–≤–æ—Å—Ç–µ–π")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    duplicate_news = sample_news + sample_news[:2]
    unique = filter_obj.remove_duplicates(duplicate_news)
    print(f"–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(unique)} –Ω–æ–≤–æ—Å—Ç–µ–π")

def test_news_formatter():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NewsFormatter...")
    
    formatter = NewsFormatter()
    
    sample_news = [
        {
            'title': '–í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–Ω—è',
            'description': '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∂–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏',
            'date': '01.01.2024 10:00',
            'url': 'https://example.com/important',
            'source': 'ImportantNews'
        },
        {
            'title': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏',
            'description': '–û–±–∑–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π',
            'date': '01.01.2024 11:00',
            'url': 'https://example.com/tech',
            'source': 'TechNews'
        }
    ]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    formatted_list = formatter.format_news_list(sample_news, 2)
    print("üì∞ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:")
    print(formatted_list)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    formatted_digest = formatter.format_digest(sample_news)
    print("\nüìß –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç:")
    print(formatted_digest)

def create_sample_user_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    sample_data = {
        "123456789": {
            "topics": [
                "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
                "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", 
                "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
                "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"
            ],
            "keywords": ["python", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
            "digest_enabled": True,
            "digest_time": "09:00",
            "digest_frequency": "daily",
            "sources": ["rss", "api"],
            "language": "ru",
            "region": "ru",
            "created_at": datetime.now().isoformat()
        }
    }
    
    with open('sample_user_data.json', 'w', encoding='utf-8') as f:
        json.dump(sample_data, f, ensure_ascii=False, indent=2)
    
    print("‚úÖ –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ sample_user_data.json")

def test_bot_commands():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    print("\nü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:")
    
    commands = [
        ("/start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        ("/help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        ("/top", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π"),
        ("/digest", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–æ–º"),
        ("/time 09:30", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"),
        ("/freq daily", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —á–∞—Å—Ç–æ—Ç—É"),
        ("/sources", "–í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"),
        ("/lang ru", "–í—ã–±—Ä–∞—Ç—å —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"),
        ("/region ru", "–í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω –†–æ—Å—Å–∏—è"),
        ("/list", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º"),
        ("/remove 1", "–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É –Ω–æ–º–µ—Ä 1"),
        ("/rename 1 IT –Ω–æ–≤–æ—Å—Ç–∏", "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ç–µ–º—É"),
        ("/about", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
    ]
    
    for command, description in commands:
        print(f"  {command:<20} - {description}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ News Aggregator Bot")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        test_news_fetcher()
        test_news_filter()
        test_news_formatter()
        create_sample_user_data()
        test_bot_commands()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python bot.py")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")

if __name__ == '__main__':
    main()
